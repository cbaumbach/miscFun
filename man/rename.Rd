% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/miscFun.R
\name{rename}
\alias{rename}
\title{Return modified names of object}
\usage{
rename(x, old2new, warn = TRUE)
}
\arguments{
\item{x}{Object whose \code{names} should be modified}

\item{old2new}{Named character vector whose name tags correspond to
the old names of \code{x} and whose elements correspond to the
new names of \code{x}.}

\item{warn}{If TRUE (default), warn about stuff (see Details)}
}
\value{
Return a character vector that can be used to change the
    \code{names} attribute of \code{x} in place using
    \code{\link[base]{names<-}}.
}
\description{
Return modified names of object
}
\details{
The \code{rename} function does not modify \code{x} and
    thereby avoids potentially expensive copies due to R's
    copy-on-modify semantics.  If you want to change the
    \code{names} attribute of \code{x} in a non-expensive way, use
    \code{\link[base]{names<-}} with \code{x} and the result of the
    call to \code{rename}.

    Note that \code{old2new} does not have to contain new values
    for all elements of \code{names(x)}.  If an element of
    \code{names(x)} is not among the tags in \code{old2new}, it
    will be unchanged.  If \code{old2new} contains the same tag
    more than once, the first element with the given tag will be
    used for changing the matching element in \code{names(x)}. If
    \code{old2new} contains a mixture of tagged and untagged
    elements, the untagged elements are implicitly tagged by the
    emptystring ("").  If \code{old2new} has no \code{names}
    attribute, the unmodified \code{names} attribute of \code{x} is
    returned.

    Unless \code{warn} is FALSE \code{rename} will issue a warning if
    \enumerate{
      \item \code{old2new} contains non-empty (non-"") tags that do
          not match any element of \code{names(x)}
      \item the \code{names} attribute of \code{old2new} is NULL
      \item \code{names(x)} contains duplicates after renaming
    }
}
\examples{
x <- c(a = 1, b = 2, c = 3, `9` = 9)
old2new <- c(a = "A", b = "B", c = NA, "foo", g = "G", a = "X", `9` = "nine")
names(x) <- rename(x, old2new)
}

