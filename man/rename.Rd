% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/miscFun.R
\name{rename}
\alias{rename}
\title{Return modified names of object}
\usage{
rename(x, mapping)
}
\arguments{
\item{x}{Object whose \code{names} should be modified}

\item{mapping}{Named character vector whose \"names\" attribute
matches all, some, or none of the names of \code{x} and whose
elements will be used to make up the new names of \code{x}.}
}
\value{
Return a character vector that can be used with
    \code{\link[base]{names<-}} to change the names of \code{x}.
}
\description{
Return modified names of object
}
\details{
The \code{rename} function does not modify \code{x} and
    thereby avoids potentially expensive copies due to R's
    copy-on-modify semantics.  Use \code{\link[base]{names<-}} with
    the result of \code{rename} to change the names of \code{x} in
    a non-expensive way.

    Note that \code{mapping} does not have to contain new values
    for all elements of \code{names(x)}.  If an element of
    \code{names(x)} is not among \code{names(mapping)}, it will be
    unchanged.  In particular, if \code{mapping} and \code{x} have
    no names in common, \code{rename} will return \code{names(x)}.
    It is an error for \code{names(mapping)} to contain duplicate
    names.  It is okay for \code{mapping} to contain a mixture of
    named and unnamed elements.  Unnamed elements of \code{x} will
    never be renamed.
}
\examples{
rename(c(a = 1, b = 2, c = 3, 4, `9` = 9),
    c(a = "A", b = NA, "foo", g = "G", `9` = "nine"))

}

